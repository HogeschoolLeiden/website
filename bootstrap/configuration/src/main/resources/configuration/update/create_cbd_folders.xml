<?xml version="1.0" encoding="UTF-8"?><sv:node xmlns:sv="http://www.jcp.org/jcr/sv/1.0" sv:name="Create CBD folders">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposys:updaterinfo</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:batchsize" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:dryrun" sv:type="Boolean">
    <sv:value>false</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:query" sv:type="String">
    <sv:value>/jcr:root/content/documents/hsl/pages/onderwijs/opleidingen-voor-professionals/nascholingen/CBD</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:script" sv:type="String">
    <sv:value>package org.hippoecm.frontend.plugins.cms.dev.updater&#13;
&#13;
import org.onehippo.repository.update.BaseNodeUpdateVisitor&#13;
import javax.jcr.Node&#13;
&#13;
class UpdaterTemplate extends BaseNodeUpdateVisitor {&#13;
&#13;
  boolean doUpdate(Node node) {&#13;
    log.debug("Updating node ${node.path}");&#13;
&#13;
        if (node.hasNodes()) {&#13;
            NodeIterator nodeIterator = node.getNodes();&#13;
            while (nodeIterator.hasNext()) {&#13;
                Node childNode = (Node) nodeIterator.next();&#13;
                if (childNode.getProperty("jcr:primaryType").getString().equals("hippo:handle")) {&#13;
                  log.debug("childNode handle ${childNode.path}");  &#13;
                  if (getMeaningfulChildOfHippoHandle(childNode).getProperty("jcr:primaryType").getString()&#13;
                            .equals("hsl:EducationPage")) {&#13;
                    if(!childNode.getName().equals("index")){&#13;
                        log.debug("creating folder ${childNode.path}");&#13;
                        createFolder(childNode, node.getParent());&#13;
                    }else{&#13;
                        log.debug("skipping CBD index");&#13;
                    }&#13;
                  }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    void createFolder(Node childNode, Node orinigFolderNode) {&#13;
        Node createdFolderNode = orinigFolderNode.addNode(childNode.getName(), "hippostd:folder");&#13;
        addTranslationNode(createdFolderNode, getTranslationName(childNode));&#13;
        setAllowedContent(createdFolderNode);&#13;
    }&#13;
&#13;
    String getTranslationName(Node childNode) {&#13;
&#13;
        String result = "";&#13;
&#13;
        String childNodeName = childNode.getName();&#13;
&#13;
        result = childNodeName.substring(0, 1).toUpperCase();&#13;
        result = result + childNodeName.substring(1);&#13;
        result = result.replaceAll("-", " ");&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    void setAllowedContent(Node node) {&#13;
&#13;
        String[] valueArray = new String[7];&#13;
        valueArray[0] = "new-education-page";&#13;
        valueArray[1] = "new-article-page";&#13;
        valueArray[2] = "new-event-page";&#13;
        valueArray[3] = "new-news-page";&#13;
        valueArray[4] = "new-faq-overview-page";&#13;
        valueArray[5] = "new-faq-folder";&#13;
        valueArray[6] = "new-personnel-folder";&#13;
        node.setProperty("hippostd:foldertype", valueArray);&#13;
    }&#13;
&#13;
    void addTranslationNode(Node node, String translation)  {&#13;
        node.addMixin("hippo:translated");&#13;
        Node translationNode = node.addNode("hippo:translation", "hippo:translation");&#13;
        translationNode.setProperty("hippo:language", "");&#13;
        translationNode.setProperty("hippo:message", translation);&#13;
&#13;
    }&#13;
&#13;
    Node getMeaningfulChildOfHippoHandle(Node node) {&#13;
        String nodeName = node.getName();&#13;
        Node result = null;&#13;
        NodeIterator ni = node.getNodes();&#13;
        while (ni.hasNext()) {&#13;
            Node childNode = (Node) ni.next();&#13;
            if (childNode.getName().equals(nodeName)) {&#13;
                result = childNode;&#13;
                break;&#13;
            }&#13;
        }&#13;
        return result;&#13;
    }&#13;
&#13;
  boolean undoUpdate(Node node) {&#13;
    throw new UnsupportedOperationException('Updater does not implement undoUpdate method')&#13;
  }&#13;
&#13;
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:throttle" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
</sv:node>
